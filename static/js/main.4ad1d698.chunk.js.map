{"version":3,"sources":["Constants.js","components/tile.js","components/square.js","components/board.js","App.js","serviceWorker.js","index.js"],"names":["ItemTypes","TILE","useStyles","makeStyles","tile","height","width","background","p","color","join","opacity","isDragging","cursor","Tile","item","useDrag","collect","monitor","drag","c","className","ref","draggable","square","border","zIndex","selected","transform","transition","Square","tileColor","onDrop","onClick","dndItem","useDrop","accept","drop","sameField","a","b","x","y","board","display","gridTemplateColumns","W","gridTemplateRows","H","Board","swap","length","React","useState","undefined","setSelected","backend","HTML5Backend","options","enableMouseEvents","preview","squares","push","key","type","pos","getColors","colors","i","Math","floor","random","randomColor","min","map","max","abs","combineColors","colorA","coefA","colorB","coefB","genBoard","colorAbove","colorBelow","j","app","App","setBoard","board_old","JSON","parse","stringify","helper","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4ad1d698.chunk.js","sourcesContent":["export const ItemTypes = {\n    TILE: 'tile',\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/styles'\nimport { useDrag } from 'react-dnd'\n\nimport { ItemTypes } from '../Constants'\n\nconst useStyles = makeStyles({\n  tile: {\n    height: '100%',\n    width: '100%',\n    background: p => `rgb(${p.color.join(\", \")})`,\n    opacity: p => p.isDragging ? 0: 1,\n    cursor: 'pointer',\n  }\n});\n\nfunction Tile({color, item}) {\n  const [ {isDragging}, drag ] = useDrag({\n    item,\n    collect: monitor => ({\n      isDragging: !!monitor.isDragging()\n    })\n  })\n  const c = useStyles({isDragging, color});\n  return (\n    <div\n      className={c.tile}\n      ref={drag}\n      draggable\n    />\n  );\n}\n\nexport default Tile;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/styles'\nimport { useDrop } from 'react-dnd'\n\nimport Tile from './tile'\nimport { ItemTypes } from '../Constants'\n\nconst useStyles = makeStyles({\n  square: {\n    background: '#000',\n    border: `1px solid '#CCC'`,\n\n    zIndex: p => p.selected ? 1: 0,\n    transform: p => p.selected ? 'scale(1.2)': 'scale(1)',\n    transition: 'all .1s ease-out',\n  }\n});\n\nfunction Square({tileColor, onDrop, onClick, selected, dndItem}) {\n  const [, drop] = useDrop({\n    accept: ItemTypes.TILE,\n    drop: onDrop,\n  })\n\n  const c = useStyles({selected});\n  return (\n    <div\n      className={c.square}\n      ref={drop}\n      onClick={onClick}\n    >\n      <Tile color={tileColor} item={dndItem}/>\n    </div>\n  );\n}\n\nexport default Square;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/styles'\nimport { DndProvider } from 'react-dnd'\nimport HTML5Backend from 'react-dnd-html5-backend'\nimport TouchBackend from 'react-dnd-touch-backend'\n\nimport Square from './square'\nimport { ItemTypes } from '../Constants'\n\nconst sameField = (a, b) => {\n  return a.x === b.x && a.y === b.y\n}\n\nconst useStyles = makeStyles({\n  board: {\n    height: 500,\n    width: 500,\n\n    display: 'grid',\n    gridTemplateColumns: p => `repeat(${p.W}, 1fr)`,\n    gridTemplateRows: p => `repeat(${p.H}, 1fr)`,\n  }\n});\n\nfunction Board({board, swap}) {\n  const W = board.length\n  const H = (board[0] || []).length\n  const c = useStyles({ W, H })\n\n  const [ selected, setSelected ] = React.useState(undefined)\n\n  return (\n    <DndProvider backend={HTML5Backend} options={{enableMouseEvents: true, preview: true}}>\n      <div\n        className={c.board}\n      >\n        {(()=>{\n          const squares = []\n          for (let y = 0; y < H; ++y) {\n            for (let x = 0; x < W; ++x) {\n              squares.push(\n                <Square\n                  key={[x,y].join(', ')}\n                  tileColor={board[x][y]}\n                  dndItem={{\n                    type: ItemTypes.TILE,\n                    pos: {x, y},\n                  }}\n                  selected={selected !== undefined && sameField(selected, {x, y})}\n                  onDrop={item => {\n                    swap(item.pos, {x, y})\n                  }}\n                  onClick={() => {\n                    if (selected === undefined) {\n                      setSelected({x, y})\n                    } else {\n                      if (!sameField(selected, {x, y})) {\n                        swap(selected, {x, y})\n                      }\n                      setSelected(undefined)\n                    }\n                  }}\n                />\n              )\n            }\n          }\n          return squares\n        })()}\n      </div>\n    </DndProvider>\n  );\n}\n\nexport default Board;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/styles'\n\nimport Board from './components/board'\nimport { ItemTypes } from './Constants'\n\nconst [ W, H ] = [5, 5]\n\nconst randomColor = () => {\n  let color = []\n  for (let i = 0; i < 3; i++) {\n    color.push(Math.floor(Math.random() * 256 - 0.001))\n  }\n  return color\n}\n\nconst colorDist = (a, b) => {\n  return Math.max(...a.map((item, i) => Math.abs(a[i] - b[i])))\n}\n\nconst getColors = () => {\n  let colors = []\n  for (let i = 0; i < 4;) {\n    let color = randomColor()\n    if (colors.length && Math.min(...colors.map(c => colorDist(c, color))) < 100) {\n      continue;\n    } else {\n      colors.push(color);\n      ++i;\n    }\n  }\n  return colors;\n}\n\nconst combineColors = (colorA, coefA, colorB, coefB) => {\n  return colorA.map((item, i) => Math.floor((colorA[i]*coefA + colorB[i]*coefB)/(coefA+coefB) + .5))\n}\n\nconst genBoard = () => {\n  const colors = getColors();\n  const board = []\n  for (let i = 0; i < W; ++i) {\n    board.push([])\n    let colorAbove = combineColors(colors[0], W-1-i, colors[1], i)\n    let colorBelow = combineColors(colors[2], W-1-i, colors[3], i)\n    for (let j = 0; j < H; ++j) {\n      board[i].push(\n        combineColors(colorAbove, H-1-j, colorBelow, j)\n      )\n    }\n  }\n  return board\n}\n\nconst useStyles = makeStyles({\n  app: {\n  }\n});\n\nfunction App() {\n  const c = useStyles();\n  const [ board, setBoard ] = React.useState(genBoard())\n\n  const swap = (a, b) => {\n    setBoard(board_old => {\n      let board = JSON.parse(JSON.stringify(board_old))\n      let helper = board[a.x][a.y]\n      board[a.x][a.y] = board[b.x][b.y]\n      board[b.x][b.y] = helper\n      return board\n    })\n  }\n\n  return (\n    <div className={c.app}>\n      <Board board={board} swap={swap}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}