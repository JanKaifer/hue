{"version":3,"sources":["Constants.js","components/tile.js","components/square.js","components/board.js","App.js","serviceWorker.js","index.js"],"names":["ItemTypes","TILE","useStyles","makeStyles","tile","height","width","background","opacity","p","isDragging","cursor","Tile","useDrag","item","type","collect","monitor","drag","c","className","ref","draggable","square","border","hasTile","Square","onDrop","useDrop","accept","drop","is_touch_device","prefixes","split","window","DocumentTouch","document","query","matchMedia","matches","mq","join","W","H","board","display","gridTemplateColumns","gridTemplateRows","Board","pos","setPos","console","log","backend","TouchBackend","HTML5Backend","squares","y","x","push","key","app","App","React","useState","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0PAAaA,EAAY,CACrBC,KAAM,QCKJC,EAAYC,YAAW,CAC3BC,KAAM,CACJC,OAAQ,OACRC,MAAO,OACPC,WAAY,MACZC,QAAS,SAAAC,GAAC,OAAIA,EAAEC,WAAa,GAAI,GACjCC,OAAQ,UAuBGC,MAnBf,YAAmB,qBACcC,YAAQ,CACrCC,KAAM,CACJC,KAAMf,EAAUC,MAElBe,QAAS,SAAAC,GAAO,MAAK,CACnBP,aAAcO,EAAQP,iBANV,mBACPA,EADO,KACPA,WAAaQ,EADN,KASVC,EAAIjB,EAAU,CAACQ,eACrB,OACE,yBACEU,UAAWD,EAAEf,KACbiB,IAAKH,EACLI,WAAS,KCvBTpB,EAAYC,YAAW,CAC3BoB,OAAQ,CACNhB,WAAY,OACZiB,OAAQ,SAAAf,GAAC,0BAAkBA,EAAEgB,QAAU,OAAQ,YAqBpCC,MAjBf,YAAoC,IAAnBD,EAAkB,EAAlBA,QAASE,EAAS,EAATA,OAAS,EAChBC,YAAQ,CACvBC,OAAQ7B,EAAUC,KAClB6B,KAAMH,IAFCG,EADwB,oBAM3BX,EAAIjB,EAAU,CAACuB,YACrB,OACE,yBACEL,UAAWD,EAAEI,OACbF,IAAKS,GAEJL,GAAW,kBAAC,EAAD,QCflB,SAASM,IACP,IAAIC,EAAW,4BAA4BC,MAAM,KAKjD,SAAK,iBAAkBC,QAAWA,OAAOC,eAAiBC,oBAAoBF,OAAOC,gBAJ5E,SAASE,GAChB,OAAOH,OAAOI,WAAWD,GAAOE,QAU3BC,CADK,CAAC,IAAKR,EAASS,KAAK,oBAAqB,SAAU,KAAKA,KAAK,K,IAInEC,EAAU,EAAPC,EAAU,EAEfzC,EAAYC,YAAW,CAC3ByC,MAAO,CACLvC,OAAQ,IACRC,MAAO,IAEPuC,QAAS,OACTC,oBAAoB,UAAD,OAAYJ,EAAZ,UACnBK,iBAAiB,UAAD,OAAeJ,EAAf,aAgCLK,MA5Bf,YAA+B,IAAfC,EAAc,EAAdA,IAAKC,EAAS,EAATA,OACb/B,EAAIjB,IAEV,OADAiD,QAAQC,IAAI,gBAAkBrB,KAE5B,kBAAC,IAAD,CAAasB,QAAStB,IAAoBuB,IAAcC,KACtD,yBACEnC,UAAWD,EAAEyB,OAEX,WAEA,IADA,IAAMY,EAAU,GADZ,WAEKC,GACP,IAHE,eAGOC,GACPF,EAAQG,KACN,kBAAC,EAAD,CACEC,IAAK,CAACF,EAAED,GAAGhB,KAAK,MAChBhB,QAASwB,EAAIS,IAAMA,GAAKT,EAAIQ,IAAMA,EAClC9B,OAAQ,kBAAMuB,EAAO,CAACQ,IAAGD,WALtBC,EAAI,EAAGA,EAAIhB,IAAKgB,EAAI,EAApBA,IADFD,EAAI,EAAGA,EAAId,IAAKc,EAAI,EAApBA,GAWT,OAAOD,EAbP,MC1CJtD,EAAYC,YAAW,CAC3B0D,IAAK,KAkBQC,MAdf,WACE,IAAM3C,EAAIjB,IADG,EAEW6D,IAAMC,SAAS,CACrCN,EAAG,EACHD,EAAG,IAJQ,mBAELR,EAFK,KAEAC,EAFA,KAOb,OACE,yBAAK9B,UAAWD,EAAE0C,KAChB,kBAAC,EAAD,CAAOZ,IAAKA,EAAKC,OAAQA,MCRXe,QACW,cAA7B/B,OAAOgC,SAASC,UAEe,UAA7BjC,OAAOgC,SAASC,UAEhBjC,OAAOgC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASlC,SAASmC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.9dfe60ec.chunk.js","sourcesContent":["export const ItemTypes = {\n    TILE: 'tile',\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/styles'\nimport { useDrag } from 'react-dnd'\n\nimport { ItemTypes } from '../Constants'\n\nconst useStyles = makeStyles({\n  tile: {\n    height: '100%',\n    width: '100%',\n    background: 'red',\n    opacity: p => p.isDragging ? .5: 1,\n    cursor: 'move',\n  }\n});\n\nfunction Tile({}) {\n  const [ {isDragging}, drag ] = useDrag({\n    item: {\n      type: ItemTypes.TILE,\n\t\t},\n    collect: monitor => ({\n      isDragging: !!monitor.isDragging()\n    })\n  })\n  const c = useStyles({isDragging});\n  return (\n    <div\n      className={c.tile}\n      ref={drag}\n      draggable\n    />\n  );\n}\n\nexport default Tile;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/styles'\nimport { useDrop } from 'react-dnd'\n\nimport Tile from './tile'\nimport { ItemTypes } from '../Constants'\n\nconst useStyles = makeStyles({\n  square: {\n    background: '#EEE',\n    border: p => `1px solid ${ p.hasTile ? '#FAA': '#CCC'}`,\n  }\n});\n\nfunction Square({hasTile, onDrop}) {\n  const [, drop] = useDrop({\n    accept: ItemTypes.TILE,\n    drop: onDrop,\n  })\n\n  const c = useStyles({hasTile});\n  return (\n    <div\n      className={c.square}\n      ref={drop}\n    >\n      {hasTile && <Tile/>}\n    </div>\n  );\n}\n\nexport default Square;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/styles'\nimport { DndProvider } from 'react-dnd'\nimport HTML5Backend from 'react-dnd-html5-backend'\nimport TouchBackend from 'react-dnd-touch-backend'\n\nimport Square from './square'\nimport { ItemTypes } from '../Constants'\n\n\n// Stolen from Stack overflow: https://stackoverflow.com/questions/4817029/whats-the-best-way-to-detect-a-touch-screen-device-using-javascript\nfunction is_touch_device() {\n  var prefixes = ' -webkit- -moz- -o- -ms- '.split(' ');\n  var mq = function(query) {\n    return window.matchMedia(query).matches;\n  }\n\n  if (('ontouchstart' in window) || window.DocumentTouch && document instanceof window.DocumentTouch) {\n    return true;\n  }\n\n  // include the 'heartz' as a way to have a non matching MQ to help terminate the join\n  // https://git.io/vznFH\n  var query = ['(', prefixes.join('touch-enabled),('), 'heartz', ')'].join('');\n  return mq(query);\n}\n\nconst [ W, H ] = [5, 5]\n\nconst useStyles = makeStyles({\n  board: {\n    height: 500,\n    width: 500,\n\n    display: 'grid',\n    gridTemplateColumns: `repeat(${W}, 1fr)`,\n    gridTemplateRows:    `repeat(${H}, 1fr)`,\n  }\n});\n\nfunction Board({pos, setPos}) {\n  const c = useStyles();\n  console.log(\"Using touch: \" + is_touch_device())\n  return (\n    <DndProvider backend={is_touch_device() ? TouchBackend: HTML5Backend}>\n      <div\n        className={c.board}\n      >\n        {(()=>{\n          const squares = []\n          for (let y = 0; y < H; ++y) {\n            for (let x = 0; x < W; ++x) {\n              squares.push(\n                <Square\n                  key={[x,y].join(', ')}\n                  hasTile={pos.x === x && pos.y === y}\n                  onDrop={() => setPos({x, y})}\n                />\n              )\n            }\n          }\n          return squares\n        })()}\n      </div>\n    </DndProvider>\n  );\n}\n\nexport default Board;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/styles'\n\nimport Board from './components/board'\nimport { ItemTypes } from './Constants'\n\nconst useStyles = makeStyles({\n  app: {\n  }\n});\n\nfunction App() {\n  const c = useStyles();\n  const [ pos, setPos ] = React.useState({\n    x: 2,\n    y: 3,\n  })\n\n  return (\n    <div className={c.app}>\n      <Board pos={pos} setPos={setPos}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}